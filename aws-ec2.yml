---
# Ansible EC2 External Inventory Script Settings
ec2:
  # AWS regions to make calls to and regions to exclude
  regions:
    - us-east-1
    - us-west-1
  regions_exclude:
    - me-south-1
  
  # For the EC2 instance variables returned by describe_instances() which are
  # used by the aws-ec2.py script, please check the following link:
  # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances

  # This is the normal destination variable to use. If you are running Ansible
  # from outside EC2, then 'PublicDnsName' makes the most sense. If you are
  # running Ansible from within EC2, then perhaps you want to use the internal
  # address, and should set this to 'PrivateDnsName'. The key of an EC2 tag
  # may optionally be used; however the boto instance variables hold precedence
  # in the event of a collision.
  destination_variable: PrivateDnsName

  # This allows you to override the inventory_name with an ec2 variable, instead
  # of using the destination_variable above. Addressing (aka ansible_ssh_host)
  # will still use destination_variable. Tags should be written as 'tag_TAGNAME'.
  #hostname_variable: tag_Name

  # For server inside a VPC, using DNS names may not make sense. When an instance
  # has 'SubnetId' set, this variable is used. If the subnet is public, setting
  # this to 'PublicIpAddress' will return the public IP address. For instances in a
  # private subnet, this should be set to 'PrivateIpAddress', and Ansible must
  # be run from within EC2. The key of an EC2 tag may optionally be used; however
  # the boto instance variables hold precedence in the event of a collision.
  vpc_destination_variable: PrivateIpAddress

  # The following two settings allow flexible ansible host naming based on a
  # python format string and a comma-separated list of ec2 tags.  Note that:
    # 1) If the tags referenced are not present for some instances, empty strings
    #    will be substituted in the format string.
    # 2) This overrides both destination_variable and vpc_destination_variable.
    #
  #destination_format: '{0}.{1}.example.com'
  #destination_format_tags:
  #  - Name
  #  - environment

  # NOTE: Route53 not yet supported. This value does not matter
  # To tag instances on EC2 with the resource records that point to them from
  # Route53, set 'route53' to True.
  route53: False

  # To use Route53 records as the inventory hostnames, uncomment and set
  # to equal the domain name you wish to use. You must also have 'route53' (above)
  # set to True.
  # route53_hostnames: .example.com

  # Additionally, you can specify the list of zones to exclude looking up in
  #route53_excluded_zones: 
  # - samplezone1.com
  # - samplezone2.com

  # NOTE: RDS is not yet supported. This value does not matter
  # To exclude RDS instances from the inventory, uncomment and set to False.
  rds: False

  # NOTE: Elasticache not yet supported. This value does not matter
  # To exclude ElastiCache instances from the inventory, uncomment and set to False.
  elasticache: False

  # By default, only EC2 instances in the 'running' state are returned. Set
  # 'all_instances' to True to return all instances regardless of state.
  all_instances: False

  # By default, only EC2 instances in the 'running' state are returned. Specify
  # EC2 instance states a list. This option is overridden when 'all_instances' is True.
  # instance_states: pending, running, shutting-down, terminated, stopping, stopped
  instance_states:
    - running

  # By default, only RDS instances in the 'available' state are returned.  Set
  # 'all_rds_instances' to True return all RDS instances regardless of state.
  #all_rds_instances: False

  # Include RDS cluster information (Aurora etc.)
  #include_rds_clusters: False
  
  # By default, only ElastiCache clusters and nodes in the 'available' state
  # are returned. Set 'all_elasticache_clusters' and/or 'all_elastic_nodes'
  # to True return all ElastiCache clusters and nodes, regardless of state.
  #
  # Note that all_elasticache_nodes only applies to listed clusters. That means
  # if you set all_elastic_clusters to false, no node will be return from
  # unavailable clusters, regardless of the state and to what you set for
  # all_elasticache_nodes.
  all_elasticache_replication_groups: False
  all_elasticache_clusters: False
  all_elasticache_nodes: False


  # API calls to EC2 are slow. For this reason, we can cache the results of an API
  # call to a file. Enable to disable caching below
  enable_caching: False

  # Set this to the path you want cache files to be written to. Two files
  # will be written to this directory:
  #   - ansible-ec2.cache
  #   - ansible-ec2.index
  # Note that you could just use the caching mechanism built into Ansible by
  # specifiying it in your ansible.cfg
  cache_path: ~/.ansible/tmp

  # The number of seconds a cache file is considered valid. After this many
  # seconds, a new API call will be made, and the cache file will be updated.
  # To disable the cache, set this value to 0
  cache_max_age: 300

  # Organize groups into a nested/hierarchy instead of a flat namespace by pushing
  # groups as children of other groups. E.g. push all region groups to a single group
  # called 'regions'
  nested_groups: True

  # Replace - tags when creating groups to avoid issues with Ansible
  replace_dash_in_groups: True

  # The EC2 inventory output can become very large. To manage its size,
  # configure which groups should be created
  group_by_instance_id: False
  group_by_region: True
  group_by_availability_zone: True
  roup_by_aws_account: True
  group_by_ami_id: True
  group_by_instance_type: True
  group_by_instance_state: False
  group_by_platform: True
  group_by_key_pair: False
  group_by_vpc_id: True
  group_by_security_group: False
  group_by_tag_keys: True
  group_by_tag_none: True
  group_by_route53_names: False
  group_by_rds_engine: False
  group_by_rds_parameter_group: False
  group_by_elasticache_engine: False
  group_by_elasticache_cluster: False
  group_by_elasticache_parameter_group: False
  group_by_elasticache_replication_group: False

  # If you only want to include hosts that match a certain regular expression
  pattern_include: "10.168.*"

  # If you want to exclude any hosts that match a certain regular expression
  # pattern_exclude: staging-*

  # Instance filters can be used to control which instances are retrieved for
  # inventory. For the full list of possible filters, please read the Boto3 API
  # docs: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances
  instance_filters:
    - Name: 'tag:Application'
      Values:
        - Ansible-Tower-Dev
    - Name: 'instance-type'
      Values:
        - c5.2xlarge

  # An IAM role can be assumed, so all requests are run as that role.
  # This can be useful for connecting across different accounts, or to limit user
  # access
  #iam_assume_role: "arn:aws:iam::<<accound-id>>:role/<<role-name>>

  # A boto configuration profile may be used to separate out credentials
  # see https://boto.readthedocs.io/en/latest/boto_config_tut.html
  # boto_profile = some-boto-profile-name
  
credentials:
  # The AWS credentials can optionally be specified here. Credentials specified
  # here are ignored if the environment variable AWS_ACCESS_KEY_ID or
  # AWS_PROFILE is set, or if the boto_profile property above is set.
  #
  # Supplying AWS credentials here is not recommended, as it introduces
  # non-trivial security concerns. When going down this route, please make sure
  # to set access permissions for this file correctly, e.g. handle it the same
  # way as you would a private SSH key.
  #
  # Unlike the boto and AWS configure files, this section does not support
  # profiles.
  #
  #aws_access_key_id: AXXXXXXXXXXXXXX
  #aws_secret_access_key: XXXXXXXXXXXXXXXXXXX
  #aws_security_token: XXXXXXXXXXXXXXXXXXXXXXXXXXXX
